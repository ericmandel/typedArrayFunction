{
  "name": "typed-array-ops",
  "version": "0.1.14",
  "description": "Element wise operator functions for ndarray data.",
  "main": "typed-array-ops.js",
  "dependencies": {
    "typed-array-function": ""
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "homepage": "https://github.com/jbroll/typedArrayFunction/blob/master/npm/typed-array-ops",
  "repository": {
    "type": "git",
    "url": " git://github.com/jbroll/typedArrayFunction.git"
  },
  "keywords": [
    "typed-array-function",
    "ndarray",
    "numeric",
    "scientific",
    "computing",
    "image",
    "array",
    "typed",
    "math"
  ],
  "author": {
    "name": "john@cfa.harvard.edu"
  },
  "license": "MIT",
  "readme": "\n**Typed Array Operators**\n\nThis package creates a number of usefull operator functions for [ndarray](https://www.npmjs.org/package/ndarray-ops) data.  Many of the funcitons provided by the [ndarray-ops](npm/typed-array-function/package.json) package and those provided [Numeric Javascript](http://www.numericjs.com/) are available.\n\n```bash\nnpm install typed-array-function\nnpm install typed-array-ops\n```\n\n**Example Usage**\n\n\n```javascript\n//First, import libraries\nvar typed =                     require(\"typed-array-function\");\n    typed = typed.extend(typed, require(\"typed-array-ops\"));\n\n//Next, create some arrays\nvar a = ndarray(new Float32Array(128*128))\n  , b = ndarray(new Float32Array(128*128))\n  , c = ndarray(new Float32Array(128*128))\n\n//Initialize b with some random numbers:\ntyped.random(b)\n\n//Set c to a constant 1\ntyped.assign(c, 1.0)\n\n//Add b and c, store result in a:\ntyped.add(a, b, c)\n\n//Multiply a by 0.5 in place\ntyped.mulseq(a, 0.5)\n\n//Print some statistics about a:\nconsole.log(\n  \"inf(a) = \", typed.inf(a),\n  \"sup(a) = \", typed.sup(a))\n```\n\n**Conventions**\n\nThis library implements component-wise operations for all of the operators and Math.* functions in JS, along with a few commonly used aggregate operations. Most of the functions in the library work by applying some symmetric binary operator to a pair of arrays. You call them like this:\n\n```javascript\ntyped.add(dest, arg1, arg2)\n```\nWhich translates into code that works (approximately) like this:\n\n```javascript\nfor(var i=0; i<dest.shape[0]; ++i) {\n  dest[i] = arg1[i] + arg2[i]\n}\n```\n\nThis library will create new arrays for you as is the convention in Numeric Javascript, but you might wish to avoid this expensive allocation for intermediate results by providing destination arrays where apropriate.  When supplying a binary operator function with 3 arguments, the first argument will be used as the result.  If the call has only 2 arguments then a result array will be allocated.  \n\nScaler variations of the operators, suffixed with 's', are provided for compatibility with ndarray-ops, but are unnecessary.  These functions are aliases for thier array versions.\n\n**The following operators follow this rule:**\n\n * add[,s,eq,seq] - Addition, +\n * sub[,s,eq,seq] - Subtraction, -\n * mul[,s,eq,seq] - Multiplication, *\n * div[,s,eq,seq] - Division, /\n * mod[,s,eq,seq] - Modulo, %\n * band[,s,eq,seq] - Bitwise And, &\n * bor[,s,eq,seq] - Bitwise Or, &\n * bxor[,s,eq,seq] - Bitwise Xor, ^\n * lshift[,s,eq,seq] - Left shift, <<\n * rshift[,s,eq,seq] - Signed right shift, >>\n * rrshift[,s,eq,seq] - Unsigned right shift, >>>\n * lt[,s,eq,seq] - Less than, <\n * gt[,s,eq,seq] - Greater than, >\n * leq[,s,eq,seq] - Less than or equal, <=\n * geq[,s,eq,seq] - Greater than or equal >=\n * eq[,s,eq,seq] - Equals, ===\n * neq[,s,eq,seq] - Not equals, !==\n * and[,s,eq,seq] - Boolean And, &&\n * or[,s,eq,seq] - Boolean Or, ||\n * max[,s,eq,seq] - Maximum, Math.max\n * min[,s,eq,seq] - Minimum, Math.min\n\n\n**Assignment**\n\nThe assignment operator:\n\n * assign(dest, src) copies one array into another.\n\n**Nullary operators**\n\nNullary operators only take one argument for the array they are assigning to, and don't have any variations. Currently there is only one of these:\n\n * random - Sets each element of an array to a random scalar between 0 and 1, Math.random().\n\n**Unary operators**\n\nUnary operators have three forms, they can be written as either:\n\n * op.abs(dest, arg)\t- dest = abs(arg)\n * op.abs(arg)\t- allocate new array for destination, then call op.args(dest, arg)\n * op.abseq(dest)\t- dest = abs(dest)\n \nTyped-array-ops exposes the following unary operators:\n\n * not[,eq] - Boolean not, !\n * bnot[,eq] - Bitwise not, ~\n * neg[,eq] - Negative, -\n * recip[,eq] - Reciprocal, 1.0/\n * abs[,eq] - Absolute value, Math.abs\n * acos[,eq] - Inverse cosine, Math.acos\n * asin[,eq] - Inverse sine, Math.asin\n * atan[,eq] - Inverse tangent, Math.atan\n * ceil[,eq] - Ceiling, Math.ceil\n * cos[,eq] - Cosine, Math.cos\n * exp[,eq] - Exponent, Math.exp\n * floor[,eq] - Floor, Math.floor\n * log[,eq] - Logarithm, Math.log\n * round[,eq] - Round, Math.round\n * sin[,eq] - Sine, Math.sin\n * sqrt[,eq] - Square root, Math.sqrt\n * tan[,eq] - Tangent, Math.tan\n\n**Non-symmetric binary operators**\n\nThere are two non-symmetric binary operators:\n\n * atan2[,s,eq,seq]\n * pow[,s,eq,seq]\n\n\n**Map-reduce (aggregate) operators**\n\nFinally, there are aggregate operators that take an array as input and compute some aggregate result or summary. These functions don't have any special suffixes and all of them take a single array as input.\n\n * equals - Check if two ndarrays are equal\n * any - Check if any element of the array is truthy\n * all - Checks if any element of the array is falsy\n * sum - Sums all elements of the array\n * prod - Multiplies all elements of the array\n * norm2squared - Computes the squared L2 norm\n * norm2 - Computes the L2 norm\n * sup - Max element in array\n * inf - Min element in array\n\n\n**Credits**\n\n(c) 2014 John B Roll\n\nInspired by ndarray-ops by Mikola Lysenko.  This README is cribbed directly from ndarray-ops.\n\nMIT License\n\n",
  "readmeFilename": "README.md",
  "_id": "typed-array-ops@0.1.14",
  "_from": "typed-array-ops@*"
}
