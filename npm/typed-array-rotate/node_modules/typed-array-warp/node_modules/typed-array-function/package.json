{
  "name": "typed-array-function",
  "version": "0.1.30",
  "description": "Typed-array-function allows the simple creation of element wise function operators for javascript TypedArray data.",
  "main": "typed-array-function.js",
  "dependencies": {
    "ndarray-nobuffer": "*"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "homepage": "https://github.com/jbroll/typedArrayFunction/blob/master/npm/typed-array-function",
  "repository": {
    "type": "git",
    "url": " git://github.com/jbroll/typedArrayFunction.git"
  },
  "keywords": [
    "ndarray",
    "numeric",
    "scientific",
    "computing",
    "image",
    "array",
    "typed",
    "math"
  ],
  "author": {
    "name": "john@cfa.harvard.edu"
  },
  "license": "MIT",
  "readme": "\n**N Dimensional Array Function Generator**\n \nThe typed-array-function module allows the simple creation of element wise function\noperators for javascript TypedArray data.  It uses the\n[ndarray](https://github.com/mikolalysenko/ndarray \"\") data representaion and\nperforms a role similar to the [cwise](https://github.com/mikolalysenko/cwise \"\")\nfunction generator.  It has a less complex \"mini langauge\" notation\nthan cwise and allows direct interoperatibility with the array of array data\ntype of [Numeric Javascript](http://www.numericjs.com).\n\nTyped-array was written to allow computation on scientific image data to be\ndone in javascript.  It is written to work with ndarray and array of array data\nobjects.\n\n\ninstall using npm\n\n```bash\nnpm install typed-array-function\n```\n\nCreate an operator:\n\n```javascript\nvar typed = require(\"typed-array-function\");\n\nvar addeq = typed(\"function (a, b) { a += b; }\");\n\nvar X = typed.ndarray(new Float32Array(128*128), [128,128])\nvar Y = typed.ndarray(new Float32Array(128*128), [128,128])\n\n//Add them together\naddeq(X, Y)\n```\n\n**Typed-array Function Notation**\n\n  * Pass a string or a function.  If a function is passed it is immedietly converted ot a string, but this allows source code to be correctly check by a jslint like precessor.\n  * The text is split in to 3 sections on the \"// ----\" separator.  If only a single \"section\" is supplied it is used as the loop body. \n  * The first section is the preparatory code.\n  * The second section is enclosed in the element wise loops.\n  * The third section is the post code.  If no third section is supplied the function's first argument is returned.\n\n  * The indicies of the element wise loop are accessed via dedicated variables.\n    * iX - innermost loop.\n    * iY - 2nd dimension loop.\n    * iZ - 3rd dimension loop.\n    * iU - 4th dimension loop.\n    * iV - 5th dimension loop.\n    * iW - 6th dimension loop.\n\n  * Or via an array named \"index\".\n\n  * The starting and ending index of each dimensions can be adjusted by the prepratory code by updating the ranges in the start and end arrays.\n\n**More Examples**\n\nMultiply an array by a value (could be a scaler or another array).\n\n```javascript\nvar mul = typed(\"function(a, x) { a *= x; });\n```\n\nInitialize an array with with the last index, this is an inconpatible difference with cwise.\n\n```javascript\nvar mgrid = typed(\"function(a) { a = iX; }\");\n```\n\n\nCheck if any element is set.\n\n```javascript\nvar any = typed(function (a) { if(a) { return true; });\n```\n\nCompute the sum of all the elements in an array.\n\n```javascript\nvar sum  = typed(function (a) {\n    var sum = 0;\n    // ----\n\tsum += a;\n    // ----\n    return sum;\n});\n```\n  \n\nCreate a function to fill each element of the array with the return value of a function.  The current indicies are passed as arguments.\n\n```javascript\nvar fill = typed(function (a, func) { a = func.apply(undefined, index); });\n```\n\n\nCompute the RMS of the values in an array.\n\n```javascript\nvar rms = typed(function (a) {\n    var sum = 0;\n    var squ = 0;\n    // ----\n\t    sum +=   a;\n\t    squ += a*a;\n    // ----\n\n    var mean = sum/a.size;\n\n    return Math.sqrt((squ - 2*mean*sum + a.size*mean*mean)/(a.size-1));\n});\n```\n\n\nCompute the index of the maximum element of an array:\n\n```javascript\nvar argmin = typed(function (a) {\n\tvar min_value = Number.POSITIVE_INFINITY;\n\tvar min_index = index.slice(0);\n\n\t// ----\n\t    if ( a < min_value ) {\n\t\tmin_value = a;\n\n\t\tfor(var i=0; i<index.length; ++i) {\n\t\t    min_index[i] = index[i];\n\t\t}\n\t    }\n\t// ----\n\n\treturn min_index;\n});\n\n//Usage:\nargmin(X)\n```\n\n\n**Baking Functions**\n\nA significant portion of the execution time of a typed-array function can be\nconsumed looking up the funcitons type signature in the function cache to see\nif it has been generated before.  If the data types of the arguments of a\nfunction that will be called multple time from a particular context are fixed,\nthe function can be pre generated and saved in a local variable.  I've called this\nprocess \"baking\".\n\nThe baking API is still very beta.\n\n**Numeric Javascript Support Functions**\n\nNumeric Javascript comes with a bunch of utility funcitons that are nice to have handy.  These functions work on both TypedArray data and Array of Array data.\n\n * clone(x)\t- Make a copy of an n dimensionsal array.\n * iota(x)\t- Fill an n element 1d array with the values from 0 to n-1.\n * dim(x)\t- Return the shape of an n dimensional array.\n * rep(s, v)\t- Return an Array of Arrays n dimensional array of shape s initialised to v.\n * array(s, t, v)\t- Return an n dimensional array of shape s, data type t initialised to value v.  Type t maybe an existing ndarray, one of the javascript TypeArray data types or undefined.  The default type is the Array of Array type.\n\n These functions are added as menbers of the main typed function.  For example:\n\n```javascript\nvar copy = typed.clone(x);\n```\n\n\n**Is it fast?**\n\nYes, It is the same as cwise for TypeArray data and slower than numeric for\nArray object data.  Baking functions helps.  Porting Numeric Javascript based code to utilize non-allocating functions helps.\n\n**How does it work?**\n\nYou can think of typed-array as a macro language on top of JavaScript.\nInternally, typed-array uses a simple lexical scanner to parse the functions\nyou give it. At run time, code for each array operation is generated lazily and\ncached.  Typed-array does not make any cache performance optimization claimes\nthat cwise attempts.  These compiled functions are then memoized for future\ncalls to the same function.\n\n\n**Credits**\n\n(c) (2014) John B. Roll\n\nInspired by the ndarray cwise compiler by Mikola Lysenko.  This README is cribbed directly from cwise.\n\nMIT License\n",
  "readmeFilename": "README.md",
  "_id": "typed-array-function@0.1.30",
  "_from": "typed-array-function@*"
}
